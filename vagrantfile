# Install plugins: docker-compose is required to start containers
unless Vagrant.has_plugin?("vagrant-docker-compose")
  system("vagrant plugin install vagrant-docker-compose")
  puts "Dependencies installed, please try the command again."
  exit
end

#disksize plugin is required to increase disk size in virtual machine
unless Vagrant.has_plugin?("vagrant-disksize")
  system("vagrant plugin install vagrant-disksize")
  puts "Dependencies installed, please try the command again."
  exit
end


#Virtual machine is based on ubuntu/bionic64
Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/bionic64"
  config.vm.hostname = "vagrant-big-data"
  config.vm.network "forwarded_port", guest: 10001, host: 10001, host_ip: "127.0.0.1" #spark-master
  config.vm.network "forwarded_port", guest: 7077, host: 7077, host_ip: "127.0.0.1" #spark-master
  config.vm.network "forwarded_port", guest: 10002, host: 10002, host_ip: "127.0.0.1" #spark-worker-1
  config.vm.network "forwarded_port", guest: 10003, host: 10003, host_ip: "127.0.0.1" #sql server
  config.vm.network "forwarded_port", guest: 10004, host: 10004, host_ip: "127.0.0.1" #lenses ui
  config.vm.network "forwarded_port", guest: 10005, host: 10005, host_ip: "127.0.0.1" #airflow
  config.vm.network "forwarded_port", guest: 10006, host: 10006, host_ip: "127.0.0.1" #jenkins
  config.vm.network "forwarded_port", guest: 5000, host: 5000, host_ip: "127.0.0.1" #jenkins
  config.vm.network "forwarded_port", guest: 50000, host: 50000, host_ip: "127.0.0.1" #jenkins
  config.vm.synced_folder "./files", "/src/files"  
  config.vm.synced_folder "./docker", "/src/docker"  
  config.vm.provider "virtualbox" do |vb|
    vb.memory = 8096
    vb.cpus = 2
	vb.name = "vagrant-big-data"
	vb.customize [ "modifyvm", :id, "--uartmode1", "disconnected" ]
	end
  config.disksize.size = '50GB'
  #update packages
  config.vm.provision :shell, inline: "apt-get update"
  #set environment variables on linux
  config.vm.provision :shell, :path => "./bootstrap.sh", :args => ENV['LENSES_LICENSE']
  #run dokcer containers
  config.vm.provision :docker
  config.vm.provision :docker_compose, yml: ["/src/docker/docker-compose.yml"], rebuild: true, project_name: "myproject", run: "always"
  config.vm.provision :shell, path: "./postexecute.sh", run: 'always'

  end